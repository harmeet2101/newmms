package com.mbopartners.mbomobile.data.db.generated.model;

import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseFieldDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseFieldValueDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_EXPENSE_FIELD_VALUE".
 */
public class TableExpenseFieldValue {

    private Long id;
    private String MboId;
    private String Value;
    private long ExpenseFieldId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableExpenseFieldValueDao myDao;

    private TableExpenseField tableExpenseField;
    private Long tableExpenseField__resolvedKey;


    public TableExpenseFieldValue() {
    }

    public TableExpenseFieldValue(Long id) {
        this.id = id;
    }

    public TableExpenseFieldValue(Long id, String MboId, String Value, long ExpenseFieldId) {
        this.id = id;
        this.MboId = MboId;
        this.Value = Value;
        this.ExpenseFieldId = ExpenseFieldId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableExpenseFieldValueDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMboId() {
        return MboId;
    }

    public void setMboId(String MboId) {
        this.MboId = MboId;
    }

    public String getValue() {
        return Value;
    }

    public void setValue(String Value) {
        this.Value = Value;
    }

    public long getExpenseFieldId() {
        return ExpenseFieldId;
    }

    public void setExpenseFieldId(long ExpenseFieldId) {
        this.ExpenseFieldId = ExpenseFieldId;
    }

    /** To-one relationship, resolved on first access. */
    public TableExpenseField getTableExpenseField() {
        long __key = this.ExpenseFieldId;
        if (tableExpenseField__resolvedKey == null || !tableExpenseField__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableExpenseFieldDao targetDao = daoSession.getTableExpenseFieldDao();
            TableExpenseField tableExpenseFieldNew = targetDao.load(__key);
            synchronized (this) {
                tableExpenseField = tableExpenseFieldNew;
            	tableExpenseField__resolvedKey = __key;
            }
        }
        return tableExpenseField;
    }

    public void setTableExpenseField(TableExpenseField tableExpenseField) {
        if (tableExpenseField == null) {
            throw new DaoException("To-one property 'ExpenseFieldId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableExpenseField = tableExpenseField;
            ExpenseFieldId = tableExpenseField.getId();
            tableExpenseField__resolvedKey = ExpenseFieldId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
