package com.mbopartners.mbomobile.data.db.generated.model;

import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableDashboardDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableDashboardFieldDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_DASHBOARD_FIELD".
 */
public class TableDashboardField {

    private Long id;
    private String Name;
    private String Value;
    private long DashboardId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableDashboardFieldDao myDao;

    private TableDashboard tableDashboard;
    private Long tableDashboard__resolvedKey;


    public TableDashboardField() {
    }

    public TableDashboardField(Long id) {
        this.id = id;
    }

    public TableDashboardField(Long id, String Name, String Value, long DashboardId) {
        this.id = id;
        this.Name = Name;
        this.Value = Value;
        this.DashboardId = DashboardId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableDashboardFieldDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public String getValue() {
        return Value;
    }

    public void setValue(String Value) {
        this.Value = Value;
    }

    public long getDashboardId() {
        return DashboardId;
    }

    public void setDashboardId(long DashboardId) {
        this.DashboardId = DashboardId;
    }

    /** To-one relationship, resolved on first access. */
    public TableDashboard getTableDashboard() {
        long __key = this.DashboardId;
        if (tableDashboard__resolvedKey == null || !tableDashboard__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableDashboardDao targetDao = daoSession.getTableDashboardDao();
            TableDashboard tableDashboardNew = targetDao.load(__key);
            synchronized (this) {
                tableDashboard = tableDashboardNew;
            	tableDashboard__resolvedKey = __key;
            }
        }
        return tableDashboard;
    }

    public void setTableDashboard(TableDashboard tableDashboard) {
        if (tableDashboard == null) {
            throw new DaoException("To-one property 'DashboardId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableDashboard = tableDashboard;
            DashboardId = tableDashboard.getId();
            tableDashboard__resolvedKey = DashboardId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
