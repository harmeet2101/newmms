package com.mbopartners.mbomobile.data.db.generated.model;

import java.util.List;
import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableCompanyDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableTimePeriodDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableTimeTaskDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableWorkOrderDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_WORK_ORDER".
 */
public class TableWorkOrder {

    private Long id;
    /** Not-null value. */
    private String MboId;
    /** Not-null value. */
    private String Name;
    private boolean TimeEntryAllowed;
    private boolean BillableExpensesAllowed;
    private long CompanyId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableWorkOrderDao myDao;

    private TableCompany tableCompany;
    private Long tableCompany__resolvedKey;

    private List<TableTimeTask> TimeTasks;
    private List<TableTimePeriod> TimePeriods;

    public TableWorkOrder() {
    }

    public TableWorkOrder(Long id) {
        this.id = id;
    }

    public TableWorkOrder(Long id, String MboId, String Name, boolean TimeEntryAllowed, boolean BillableExpensesAllowed, long CompanyId) {
        this.id = id;
        this.MboId = MboId;
        this.Name = Name;
        this.TimeEntryAllowed = TimeEntryAllowed;
        this.BillableExpensesAllowed = BillableExpensesAllowed;
        this.CompanyId = CompanyId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableWorkOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMboId() {
        return MboId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMboId(String MboId) {
        this.MboId = MboId;
    }

    /** Not-null value. */
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String Name) {
        this.Name = Name;
    }

    public boolean getTimeEntryAllowed() {
        return TimeEntryAllowed;
    }

    public void setTimeEntryAllowed(boolean TimeEntryAllowed) {
        this.TimeEntryAllowed = TimeEntryAllowed;
    }

    public boolean getBillableExpensesAllowed() {
        return BillableExpensesAllowed;
    }

    public void setBillableExpensesAllowed(boolean BillableExpensesAllowed) {
        this.BillableExpensesAllowed = BillableExpensesAllowed;
    }

    public long getCompanyId() {
        return CompanyId;
    }

    public void setCompanyId(long CompanyId) {
        this.CompanyId = CompanyId;
    }

    /** To-one relationship, resolved on first access. */
    public TableCompany getTableCompany() {
        long __key = this.CompanyId;
        if (tableCompany__resolvedKey == null || !tableCompany__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableCompanyDao targetDao = daoSession.getTableCompanyDao();
            TableCompany tableCompanyNew = targetDao.load(__key);
            synchronized (this) {
                tableCompany = tableCompanyNew;
            	tableCompany__resolvedKey = __key;
            }
        }
        return tableCompany;
    }

    public void setTableCompany(TableCompany tableCompany) {
        if (tableCompany == null) {
            throw new DaoException("To-one property 'CompanyId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableCompany = tableCompany;
            CompanyId = tableCompany.getId();
            tableCompany__resolvedKey = CompanyId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableTimeTask> getTimeTasks() {
        if (TimeTasks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableTimeTaskDao targetDao = daoSession.getTableTimeTaskDao();
            List<TableTimeTask> TimeTasksNew = targetDao._queryTableWorkOrder_TimeTasks(id);
            synchronized (this) {
                if(TimeTasks == null) {
                    TimeTasks = TimeTasksNew;
                }
            }
        }
        return TimeTasks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTimeTasks() {
        TimeTasks = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableTimePeriod> getTimePeriods() {
        if (TimePeriods == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableTimePeriodDao targetDao = daoSession.getTableTimePeriodDao();
            List<TableTimePeriod> TimePeriodsNew = targetDao._queryTableWorkOrder_TimePeriods(id);
            synchronized (this) {
                if(TimePeriods == null) {
                    TimePeriods = TimePeriodsNew;
                }
            }
        }
        return TimePeriods;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTimePeriods() {
        TimePeriods = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
