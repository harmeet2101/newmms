package com.mbopartners.mbomobile.data.db.generated.model;

import java.util.List;
import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableTimeEntryDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableTimePeriodDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableWorkOrderDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_TIME_PERIOD".
 */
public class TableTimePeriod {

    private Long id;
    /** Not-null value. */
    private String MboId;
    /** Not-null value. */
    private String Name;
    /** Not-null value. */
    private java.util.Date StartDate;
    /** Not-null value. */
    private java.util.Date EndDate;
    private boolean Current;
    private boolean Submittable;
    /** Not-null value. */
    private String MboWorkOrderId;
    private long WorkOrderId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableTimePeriodDao myDao;

    private TableWorkOrder tableWorkOrder;
    private Long tableWorkOrder__resolvedKey;

    private List<TableTimeEntry> TimeEntries;

    public TableTimePeriod() {
    }

    public TableTimePeriod(Long id) {
        this.id = id;
    }

    public TableTimePeriod(Long id, String MboId, String Name, java.util.Date StartDate, java.util.Date EndDate, boolean Current, boolean Submittable, String MboWorkOrderId, long WorkOrderId) {
        this.id = id;
        this.MboId = MboId;
        this.Name = Name;
        this.StartDate = StartDate;
        this.EndDate = EndDate;
        this.Current = Current;
        this.Submittable = Submittable;
        this.MboWorkOrderId = MboWorkOrderId;
        this.WorkOrderId = WorkOrderId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableTimePeriodDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMboId() {
        return MboId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMboId(String MboId) {
        this.MboId = MboId;
    }

    /** Not-null value. */
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String Name) {
        this.Name = Name;
    }

    /** Not-null value. */
    public java.util.Date getStartDate() {
        return StartDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStartDate(java.util.Date StartDate) {
        this.StartDate = StartDate;
    }

    /** Not-null value. */
    public java.util.Date getEndDate() {
        return EndDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEndDate(java.util.Date EndDate) {
        this.EndDate = EndDate;
    }

    public boolean getCurrent() {
        return Current;
    }

    public void setCurrent(boolean Current) {
        this.Current = Current;
    }

    public boolean getSubmittable() {
        return Submittable;
    }

    public void setSubmittable(boolean Submittable) {
        this.Submittable = Submittable;
    }

    /** Not-null value. */
    public String getMboWorkOrderId() {
        return MboWorkOrderId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMboWorkOrderId(String MboWorkOrderId) {
        this.MboWorkOrderId = MboWorkOrderId;
    }

    public long getWorkOrderId() {
        return WorkOrderId;
    }

    public void setWorkOrderId(long WorkOrderId) {
        this.WorkOrderId = WorkOrderId;
    }

    /** To-one relationship, resolved on first access. */
    public TableWorkOrder getTableWorkOrder() {
        long __key = this.WorkOrderId;
        if (tableWorkOrder__resolvedKey == null || !tableWorkOrder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableWorkOrderDao targetDao = daoSession.getTableWorkOrderDao();
            TableWorkOrder tableWorkOrderNew = targetDao.load(__key);
            synchronized (this) {
                tableWorkOrder = tableWorkOrderNew;
            	tableWorkOrder__resolvedKey = __key;
            }
        }
        return tableWorkOrder;
    }

    public void setTableWorkOrder(TableWorkOrder tableWorkOrder) {
        if (tableWorkOrder == null) {
            throw new DaoException("To-one property 'WorkOrderId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableWorkOrder = tableWorkOrder;
            WorkOrderId = tableWorkOrder.getId();
            tableWorkOrder__resolvedKey = WorkOrderId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableTimeEntry> getTimeEntries() {
        if (TimeEntries == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableTimeEntryDao targetDao = daoSession.getTableTimeEntryDao();
            List<TableTimeEntry> TimeEntriesNew = targetDao._queryTableTimePeriod_TimeEntries(id);
            synchronized (this) {
                if(TimeEntries == null) {
                    TimeEntries = TimeEntriesNew;
                }
            }
        }
        return TimeEntries;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTimeEntries() {
        TimeEntries = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
