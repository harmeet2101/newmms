package com.mbopartners.mbomobile.data.db.generated.model;

import java.util.List;
import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseFieldDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseTypeDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_EXPENSE_TYPE".
 */
public class TableExpenseType {

    /** Not-null value. */
    private String MboId;
    /** Not-null value. */
    private String Name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableExpenseTypeDao myDao;

    private List<TableExpenseField> Fields;

    public TableExpenseType() {
    }

    public TableExpenseType(String MboId) {
        this.MboId = MboId;
    }

    public TableExpenseType(String MboId, String Name) {
        this.MboId = MboId;
        this.Name = Name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableExpenseTypeDao() : null;
    }

    /** Not-null value. */
    public String getMboId() {
        return MboId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMboId(String MboId) {
        this.MboId = MboId;
    }

    /** Not-null value. */
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String Name) {
        this.Name = Name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableExpenseField> getFields() {
        if (Fields == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableExpenseFieldDao targetDao = daoSession.getTableExpenseFieldDao();
            List<TableExpenseField> FieldsNew = targetDao._queryTableExpenseType_Fields(MboId);
            synchronized (this) {
                if(Fields == null) {
                    Fields = FieldsNew;
                }
            }
        }
        return Fields;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFields() {
        Fields = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
