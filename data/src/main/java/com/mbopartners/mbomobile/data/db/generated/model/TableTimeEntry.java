package com.mbopartners.mbomobile.data.db.generated.model;

import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableTimeEntryDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableTimePeriodDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_TIME_ENTRY".
 */
public class TableTimeEntry {

    private Long id;
    private int RecState;
    private String MboId;
    /** Not-null value. */
    private String WorkOrderId;
    /** Not-null value. */
    private String TaskID;
    private double Hours;
    /** Not-null value. */
    private java.util.Date Date;
    private String Note;
    private boolean Editable;
    private Double Version;
    private long TimePeriodId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableTimeEntryDao myDao;

    private TableTimePeriod tableTimePeriod;
    private Long tableTimePeriod__resolvedKey;


    public TableTimeEntry() {
    }

    public TableTimeEntry(Long id) {
        this.id = id;
    }

    public TableTimeEntry(Long id, int RecState, String MboId, String WorkOrderId, String TaskID, double Hours, java.util.Date Date, String Note, boolean Editable, Double Version, long TimePeriodId) {
        this.id = id;
        this.RecState = RecState;
        this.MboId = MboId;
        this.WorkOrderId = WorkOrderId;
        this.TaskID = TaskID;
        this.Hours = Hours;
        this.Date = Date;
        this.Note = Note;
        this.Editable = Editable;
        this.Version = Version;
        this.TimePeriodId = TimePeriodId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableTimeEntryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getRecState() {
        return RecState;
    }

    public void setRecState(int RecState) {
        this.RecState = RecState;
    }

    public String getMboId() {
        return MboId;
    }

    public void setMboId(String MboId) {
        this.MboId = MboId;
    }

    /** Not-null value. */
    public String getWorkOrderId() {
        return WorkOrderId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setWorkOrderId(String WorkOrderId) {
        this.WorkOrderId = WorkOrderId;
    }

    /** Not-null value. */
    public String getTaskID() {
        return TaskID;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTaskID(String TaskID) {
        this.TaskID = TaskID;
    }

    public double getHours() {
        return Hours;
    }

    public void setHours(double Hours) {
        this.Hours = Hours;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return Date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date Date) {
        this.Date = Date;
    }

    public String getNote() {
        return Note;
    }

    public void setNote(String Note) {
        this.Note = Note;
    }

    public boolean getEditable() {
        return Editable;
    }

    public void setEditable(boolean Editable) {
        this.Editable = Editable;
    }

    public Double getVersion() {
        return Version;
    }

    public void setVersion(Double Version) {
        this.Version = Version;
    }

    public long getTimePeriodId() {
        return TimePeriodId;
    }

    public void setTimePeriodId(long TimePeriodId) {
        this.TimePeriodId = TimePeriodId;
    }

    /** To-one relationship, resolved on first access. */
    public TableTimePeriod getTableTimePeriod() {
        long __key = this.TimePeriodId;
        if (tableTimePeriod__resolvedKey == null || !tableTimePeriod__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableTimePeriodDao targetDao = daoSession.getTableTimePeriodDao();
            TableTimePeriod tableTimePeriodNew = targetDao.load(__key);
            synchronized (this) {
                tableTimePeriod = tableTimePeriodNew;
            	tableTimePeriod__resolvedKey = __key;
            }
        }
        return tableTimePeriod;
    }

    public void setTableTimePeriod(TableTimePeriod tableTimePeriod) {
        if (tableTimePeriod == null) {
            throw new DaoException("To-one property 'TimePeriodId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableTimePeriod = tableTimePeriod;
            TimePeriodId = tableTimePeriod.getId();
            tableTimePeriod__resolvedKey = TimePeriodId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
