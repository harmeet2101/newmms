package com.mbopartners.mbomobile.data.db.generated.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.mbopartners.mbomobile.data.db.generated.dao.TableBusinessManagerDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableUserProfileDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableDashboardDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableDashboardFieldDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableWorkOrderDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableTimeTaskDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableCompanyDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableTimePeriodDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableTimeEntryDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseDataDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableReceiptDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseTypeDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseFieldDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseFieldValueDao;
import com.mbopartners.mbomobile.data.db.generated.dao.ExpenseType_2_ExpenseFieldDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableBusinessAddressDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableBusinessCenterDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableBusinessExpensesDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableBusinessPayrollTaxesDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableBusinessWithHoldingDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableExpenseReimbersementsDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableNextPaymentDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePayrollAmountDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePayrollSummaryDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePayrollTransactionsDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePersonAfterDeductionsDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePersonDepositsDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePersonGrossAmountDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePersonNetAmountDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePersonPayCheckAmountDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePersonPayrollTaxesDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePersonWithHoldingDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TablePreviousPaymentDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableSummaryBusinessWithHoldingDao;
import com.mbopartners.mbomobile.data.db.generated.dao.payroll.TableSummaryPayrollAmountDao;
import com.mbopartners.mbomobile.data.db.generated.model.payroll.TableBusinessCenter;
import com.mbopartners.mbomobile.data.db.generated.model.payroll.TableExpenseReimbersements;
import com.mbopartners.mbomobile.data.db.generated.model.payroll.TableNextPayment;
import com.mbopartners.mbomobile.data.db.generated.model.payroll.TablePersonAfterDeductions;
import com.mbopartners.mbomobile.data.db.generated.model.payroll.TablePersonDeposits;
import com.mbopartners.mbomobile.data.db.generated.model.payroll.TableSummaryBusinessWithHolding;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 13): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 13;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        TableBusinessManagerDao.createTable(db, ifNotExists);
        TableUserProfileDao.createTable(db, ifNotExists);
        TableDashboardDao.createTable(db, ifNotExists);
        TableDashboardFieldDao.createTable(db, ifNotExists);
        TableWorkOrderDao.createTable(db, ifNotExists);
        TableTimeTaskDao.createTable(db, ifNotExists);
        TableCompanyDao.createTable(db, ifNotExists);
        TableTimePeriodDao.createTable(db, ifNotExists);
        TableTimeEntryDao.createTable(db, ifNotExists);
        TableExpenseDao.createTable(db, ifNotExists);
        TableExpenseDataDao.createTable(db, ifNotExists);
        TableReceiptDao.createTable(db, ifNotExists);
        TableExpenseTypeDao.createTable(db, ifNotExists);
        TableExpenseFieldDao.createTable(db, ifNotExists);
        TableExpenseFieldValueDao.createTable(db, ifNotExists);
        ExpenseType_2_ExpenseFieldDao.createTable(db, ifNotExists);
        TableBusinessCenterDao.createTable(db,ifNotExists);
        TableBusinessAddressDao.createTable(db,ifNotExists);
        TablePayrollSummaryDao.createTable(db,ifNotExists);
        TableNextPaymentDao.createTable(db,ifNotExists);
        TablePreviousPaymentDao.createTable(db,ifNotExists);
        TableBusinessWithHoldingDao.createTable(db,ifNotExists);
        TablePayrollAmountDao.createTable(db,ifNotExists);
        TableBusinessExpensesDao.createTable(db,ifNotExists);
        TableBusinessPayrollTaxesDao.createTable(db,ifNotExists);
        TablePersonWithHoldingDao.createTable(db,ifNotExists);
        TablePersonGrossAmountDao.createTable(db,ifNotExists);
        TablePersonPayrollTaxesDao.createTable(db,ifNotExists);
        TableExpenseReimbersementsDao.createTable(db,ifNotExists);
        TablePayrollTransactionsDao.createTable(db,ifNotExists);
        TablePersonDepositsDao.createTable(db,ifNotExists);

        TableSummaryBusinessWithHoldingDao.createTable(db,ifNotExists);
        TableSummaryPayrollAmountDao.createTable(db,ifNotExists);
        TablePersonAfterDeductionsDao.createTable(db,ifNotExists);

        TablePersonNetAmountDao.createTable(db,ifNotExists);
        TablePersonPayCheckAmountDao.createTable(db,ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        TableBusinessManagerDao.dropTable(db, ifExists);
        TableUserProfileDao.dropTable(db, ifExists);
        TableDashboardDao.dropTable(db, ifExists);
        TableDashboardFieldDao.dropTable(db, ifExists);
        TableWorkOrderDao.dropTable(db, ifExists);
        TableTimeTaskDao.dropTable(db, ifExists);
        TableCompanyDao.dropTable(db, ifExists);
        TableTimePeriodDao.dropTable(db, ifExists);
        TableTimeEntryDao.dropTable(db, ifExists);
        TableExpenseDao.dropTable(db, ifExists);
        TableExpenseDataDao.dropTable(db, ifExists);
        TableReceiptDao.dropTable(db, ifExists);
        TableExpenseTypeDao.dropTable(db, ifExists);
        TableExpenseFieldDao.dropTable(db, ifExists);
        TableExpenseFieldValueDao.dropTable(db, ifExists);
        ExpenseType_2_ExpenseFieldDao.dropTable(db, ifExists);
        TableBusinessCenterDao.dropTable(db,ifExists);
        TableBusinessAddressDao.dropTable(db,ifExists);
        TablePayrollSummaryDao.dropTable(db,ifExists);
        TableNextPaymentDao.dropTable(db,ifExists);
        TablePreviousPaymentDao.dropTable(db,ifExists);
        TableBusinessWithHoldingDao.dropTable(db,ifExists);
        TablePayrollAmountDao.dropTable(db,ifExists);
        TableBusinessExpensesDao.dropTable(db,ifExists);
        TableBusinessPayrollTaxesDao.dropTable(db,ifExists);
        TablePersonWithHoldingDao.dropTable(db,ifExists);
        TablePersonGrossAmountDao.dropTable(db,ifExists);
        TablePersonPayrollTaxesDao.dropTable(db,ifExists);
        TableExpenseReimbersementsDao.dropTable(db,ifExists);
        TablePayrollTransactionsDao.dropTable(db,ifExists);
        TablePersonDepositsDao.dropTable(db,ifExists);
        TableSummaryBusinessWithHoldingDao.dropTable(db,ifExists);
        TableSummaryPayrollAmountDao.dropTable(db,ifExists);
        TablePersonAfterDeductionsDao.dropTable(db,ifExists);
        TablePersonNetAmountDao.dropTable(db,ifExists);
        TablePersonPayCheckAmountDao.dropTable(db,ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(TableBusinessManagerDao.class);
        registerDaoClass(TableUserProfileDao.class);
        registerDaoClass(TableDashboardDao.class);
        registerDaoClass(TableDashboardFieldDao.class);
        registerDaoClass(TableWorkOrderDao.class);
        registerDaoClass(TableTimeTaskDao.class);
        registerDaoClass(TableCompanyDao.class);
        registerDaoClass(TableTimePeriodDao.class);
        registerDaoClass(TableTimeEntryDao.class);
        registerDaoClass(TableExpenseDao.class);
        registerDaoClass(TableExpenseDataDao.class);
        registerDaoClass(TableReceiptDao.class);
        registerDaoClass(TableExpenseTypeDao.class);
        registerDaoClass(TableExpenseFieldDao.class);
        registerDaoClass(TableExpenseFieldValueDao.class);
        registerDaoClass(ExpenseType_2_ExpenseFieldDao.class);
        registerDaoClass(TableBusinessCenterDao.class);
        registerDaoClass(TableBusinessAddressDao.class);
        registerDaoClass(TablePayrollSummaryDao.class);
        registerDaoClass(TableNextPaymentDao.class);
        registerDaoClass(TablePreviousPaymentDao.class);
        registerDaoClass(TableBusinessWithHoldingDao.class);
        registerDaoClass(TablePayrollAmountDao.class);
        registerDaoClass(TableBusinessExpensesDao.class);
        registerDaoClass(TableBusinessPayrollTaxesDao.class);
        registerDaoClass(TablePersonWithHoldingDao.class);
        registerDaoClass(TablePersonGrossAmountDao.class);
        registerDaoClass(TablePersonPayrollTaxesDao.class);
        registerDaoClass(TableExpenseReimbersementsDao.class);
        registerDaoClass(TablePayrollTransactionsDao.class);
        registerDaoClass(TablePersonDepositsDao.class);
        registerDaoClass(TableSummaryBusinessWithHoldingDao.class);
        registerDaoClass(TableSummaryPayrollAmountDao.class);
        registerDaoClass(TablePersonAfterDeductionsDao.class);
        registerDaoClass(TablePersonNetAmountDao.class);
        registerDaoClass(TablePersonPayCheckAmountDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
