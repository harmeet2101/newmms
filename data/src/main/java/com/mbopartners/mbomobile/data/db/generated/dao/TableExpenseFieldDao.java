package com.mbopartners.mbomobile.data.db.generated.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mbopartners.mbomobile.data.db.generated.model.TableExpenseType;

import com.mbopartners.mbomobile.data.db.generated.model.TableExpenseField;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE_EXPENSE_FIELD".
*/
public class TableExpenseFieldDao extends AbstractDao<TableExpenseField, Long> {

    public static final String TABLENAME = "TABLE_EXPENSE_FIELD";

    /**
     * Properties of entity TableExpenseField.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MboId = new Property(1, String.class, "MboId", false, "MBO_ID");
        public final static Property Type = new Property(2, String.class, "Type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "Name", false, "NAME");
        public final static Property Required = new Property(4, Boolean.class, "Required", false, "REQUIRED");
        public final static Property MaxLength = new Property(5, Integer.class, "MaxLength", false, "MAX_LENGTH");
        public final static Property ExpenseTypeId = new Property(6, String.class, "ExpenseTypeId", false, "EXPENSE_TYPE_ID");
    };

    private DaoSession daoSession;

    private Query<TableExpenseField> tableExpenseType_FieldsQuery;

    public TableExpenseFieldDao(DaoConfig config) {
        super(config);
    }
    
    public TableExpenseFieldDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_EXPENSE_FIELD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MBO_ID\" TEXT NOT NULL ," + // 1: MboId
                "\"TYPE\" TEXT," + // 2: Type
                "\"NAME\" TEXT," + // 3: Name
                "\"REQUIRED\" INTEGER," + // 4: Required
                "\"MAX_LENGTH\" INTEGER," + // 5: MaxLength
                "\"EXPENSE_TYPE_ID\" TEXT NOT NULL );"); // 6: ExpenseTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_EXPENSE_FIELD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TableExpenseField entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMboId());
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(3, Type);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(4, Name);
        }
 
        Boolean Required = entity.getRequired();
        if (Required != null) {
            stmt.bindLong(5, Required ? 1L: 0L);
        }
 
        Integer MaxLength = entity.getMaxLength();
        if (MaxLength != null) {
            stmt.bindLong(6, MaxLength);
        }
        stmt.bindString(7, entity.getExpenseTypeId());
    }

    @Override
    protected void attachEntity(TableExpenseField entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TableExpenseField readEntity(Cursor cursor, int offset) {
        TableExpenseField entity = new TableExpenseField( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // MboId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Name
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // Required
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // MaxLength
            cursor.getString(offset + 6) // ExpenseTypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TableExpenseField entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMboId(cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRequired(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setMaxLength(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setExpenseTypeId(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TableExpenseField entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TableExpenseField entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Fields" to-many relationship of TableExpenseType. */
    public List<TableExpenseField> _queryTableExpenseType_Fields(String ExpenseTypeId) {
        synchronized (this) {
            if (tableExpenseType_FieldsQuery == null) {
                QueryBuilder<TableExpenseField> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ExpenseTypeId.eq(null));
                tableExpenseType_FieldsQuery = queryBuilder.build();
            }
        }
        Query<TableExpenseField> query = tableExpenseType_FieldsQuery.forCurrentThread();
        query.setParameter(0, ExpenseTypeId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTableExpenseTypeDao().getAllColumns());
            builder.append(" FROM TABLE_EXPENSE_FIELD T");
            builder.append(" LEFT JOIN TABLE_EXPENSE_TYPE T0 ON T.\"EXPENSE_TYPE_ID\"=T0.\"MBO_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TableExpenseField loadCurrentDeep(Cursor cursor, boolean lock) {
        TableExpenseField entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TableExpenseType tableExpenseType = loadCurrentOther(daoSession.getTableExpenseTypeDao(), cursor, offset);
         if(tableExpenseType != null) {
            entity.setTableExpenseType(tableExpenseType);
        }

        return entity;    
    }

    public TableExpenseField loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TableExpenseField> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TableExpenseField> list = new ArrayList<TableExpenseField>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TableExpenseField> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TableExpenseField> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
