package com.mbopartners.mbomobile.data.db.generated.model;

import java.util.List;
import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseFieldDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseFieldValueDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseTypeDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_EXPENSE_FIELD".
 */
public class TableExpenseField {

    private Long id;
    /** Not-null value. */
    private String MboId;
    private String Type;
    private String Name;
    private Boolean Required;
    private Integer MaxLength;
    /** Not-null value. */
    private String ExpenseTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableExpenseFieldDao myDao;

    private TableExpenseType tableExpenseType;
    private String tableExpenseType__resolvedKey;

    private List<TableExpenseFieldValue> Values;

    public TableExpenseField() {
    }

    public TableExpenseField(Long id) {
        this.id = id;
    }

    public TableExpenseField(Long id, String MboId, String Type, String Name, Boolean Required, Integer MaxLength, String ExpenseTypeId) {
        this.id = id;
        this.MboId = MboId;
        this.Type = Type;
        this.Name = Name;
        this.Required = Required;
        this.MaxLength = MaxLength;
        this.ExpenseTypeId = ExpenseTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableExpenseFieldDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMboId() {
        return MboId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMboId(String MboId) {
        this.MboId = MboId;
    }

    public String getType() {
        return Type;
    }

    public void setType(String Type) {
        this.Type = Type;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public Boolean getRequired() {
        return Required;
    }

    public void setRequired(Boolean Required) {
        this.Required = Required;
    }

    public Integer getMaxLength() {
        return MaxLength;
    }

    public void setMaxLength(Integer MaxLength) {
        this.MaxLength = MaxLength;
    }

    /** Not-null value. */
    public String getExpenseTypeId() {
        return ExpenseTypeId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setExpenseTypeId(String ExpenseTypeId) {
        this.ExpenseTypeId = ExpenseTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public TableExpenseType getTableExpenseType() {
        String __key = this.ExpenseTypeId;
        if (tableExpenseType__resolvedKey == null || tableExpenseType__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableExpenseTypeDao targetDao = daoSession.getTableExpenseTypeDao();
            TableExpenseType tableExpenseTypeNew = targetDao.load(__key);
            synchronized (this) {
                tableExpenseType = tableExpenseTypeNew;
            	tableExpenseType__resolvedKey = __key;
            }
        }
        return tableExpenseType;
    }

    public void setTableExpenseType(TableExpenseType tableExpenseType) {
        if (tableExpenseType == null) {
            throw new DaoException("To-one property 'ExpenseTypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableExpenseType = tableExpenseType;
            ExpenseTypeId = tableExpenseType.getMboId();
            tableExpenseType__resolvedKey = ExpenseTypeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableExpenseFieldValue> getValues() {
        if (Values == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableExpenseFieldValueDao targetDao = daoSession.getTableExpenseFieldValueDao();
            List<TableExpenseFieldValue> ValuesNew = targetDao._queryTableExpenseField_Values(id);
            synchronized (this) {
                if(Values == null) {
                    Values = ValuesNew;
                }
            }
        }
        return Values;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetValues() {
        Values = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
