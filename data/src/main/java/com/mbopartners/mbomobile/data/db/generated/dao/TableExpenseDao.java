package com.mbopartners.mbomobile.data.db.generated.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.mbopartners.mbomobile.data.db.generated.model.TableExpenseType;

import com.mbopartners.mbomobile.data.db.generated.model.TableExpense;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE_EXPENSE".
*/
public class TableExpenseDao extends AbstractDao<TableExpense, Long> {

    public static final String TABLENAME = "TABLE_EXPENSE";

    /**
     * Properties of entity TableExpense.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MboId = new Property(1, String.class, "MboId", false, "MBO_ID");
        public final static Property MboWorkOrderId = new Property(2, String.class, "MboWorkOrderId", false, "MBO_WORK_ORDER_ID");
        public final static Property Description = new Property(3, String.class, "Description", false, "DESCRIPTION");
        public final static Property MboAssociateId = new Property(4, String.class, "MboAssociateId", false, "MBO_ASSOCIATE_ID");
        public final static Property Amount = new Property(5, double.class, "Amount", false, "AMOUNT");
        public final static Property Editable = new Property(6, boolean.class, "Editable", false, "EDITABLE");
        public final static Property Billable = new Property(7, boolean.class, "Billable", false, "BILLABLE");
        public final static Property Version = new Property(8, Double.class, "Version", false, "VERSION");
        public final static Property MboExpenseTypeId = new Property(9, String.class, "MboExpenseTypeId", false, "MBO_EXPENSE_TYPE_ID");
       public final static Property lastChangedDate = new Property(10, String.class, "lastChangedDate", false, "lastChangedDate");

    };

    private DaoSession daoSession;


    public TableExpenseDao(DaoConfig config) {
        super(config);
    }
    
    public TableExpenseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_EXPENSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MBO_ID\" TEXT NOT NULL ," + // 1: MboId
                "\"MBO_WORK_ORDER_ID\" TEXT," + // 2: MboWorkOrderId
                "\"DESCRIPTION\" TEXT," + // 3: Description
                "\"MBO_ASSOCIATE_ID\" TEXT NOT NULL ," + // 4: MboAssociateId
                "\"AMOUNT\" REAL NOT NULL ," + // 5: Amount
                "\"EDITABLE\" INTEGER NOT NULL ," + // 6: Editable
                "\"BILLABLE\" INTEGER NOT NULL ," + // 7: Billable
                "\"VERSION\" REAL," + // 8: Version
                "\"MBO_EXPENSE_TYPE_ID\" TEXT NOT NULL," +
                "\"lastChangedDate\" TEXT);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_EXPENSE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TableExpense entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMboId());
 
        String MboWorkOrderId = entity.getMboWorkOrderId();
        if (MboWorkOrderId != null) {
            stmt.bindString(3, MboWorkOrderId);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(4, Description);
        }
        stmt.bindString(5, entity.getMboAssociateId());
        stmt.bindDouble(6, entity.getAmount());
        stmt.bindLong(7, entity.getEditable() ? 1L: 0L);
        stmt.bindLong(8, entity.getBillable() ? 1L: 0L);
 
        Double Version = entity.getVersion();
        if (Version != null) {
            stmt.bindDouble(9, Version);
        }

        stmt.bindString(10, entity.getMboExpenseTypeId());
        stmt.bindString(11,entity.getLastChangedDate());
    }

    @Override
    protected void attachEntity(TableExpense entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TableExpense readEntity(Cursor cursor, int offset) {
        TableExpense entity = new TableExpense( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // MboId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MboWorkOrderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Description
            cursor.getString(offset + 4), // MboAssociateId
            cursor.getDouble(offset + 5), // Amount
            cursor.getShort(offset + 6) != 0, // Editable
            cursor.getShort(offset + 7) != 0, // Billable
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // Version
            cursor.getString(offset + 9) // MboExpenseTypeId
                ,cursor.getString(offset + 10)
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TableExpense entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMboId(cursor.getString(offset + 1));
        entity.setMboWorkOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMboAssociateId(cursor.getString(offset + 4));
        entity.setAmount(cursor.getDouble(offset + 5));
        entity.setEditable(cursor.getShort(offset + 6) != 0);
        entity.setBillable(cursor.getShort(offset + 7) != 0);
        entity.setVersion(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setMboExpenseTypeId(cursor.getString(offset + 9));
        entity.setLastChangedDate(cursor.getString(offset+10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TableExpense entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TableExpense entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTableExpenseTypeDao().getAllColumns());
            builder.append(" FROM TABLE_EXPENSE T");
            builder.append(" LEFT JOIN TABLE_EXPENSE_TYPE T0 ON T.\"MBO_EXPENSE_TYPE_ID\"=T0.\"MBO_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TableExpense loadCurrentDeep(Cursor cursor, boolean lock) {
        TableExpense entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TableExpenseType ExpenseType = loadCurrentOther(daoSession.getTableExpenseTypeDao(), cursor, offset);
         if(ExpenseType != null) {
            entity.setExpenseType(ExpenseType);
        }

        return entity;    
    }

    public TableExpense loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TableExpense> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TableExpense> list = new ArrayList<TableExpense>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TableExpense> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TableExpense> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
