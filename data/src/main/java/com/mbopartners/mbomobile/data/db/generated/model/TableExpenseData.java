package com.mbopartners.mbomobile.data.db.generated.model;

import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseDataDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_EXPENSE_DATA".
 */
public class TableExpenseData {

    private Long id;
    /** Not-null value. */
    private String Name;
    /** Not-null value. */
    private String Value;
    private long ExpenseId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableExpenseDataDao myDao;

    private TableExpense tableExpense;
    private Long tableExpense__resolvedKey;


    public TableExpenseData() {
    }

    public TableExpenseData(Long id) {
        this.id = id;
    }

    public TableExpenseData(Long id, String Name, String Value, long ExpenseId) {
        this.id = id;
        this.Name = Name;
        this.Value = Value;
        this.ExpenseId = ExpenseId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableExpenseDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String Name) {
        this.Name = Name;
    }

    /** Not-null value. */
    public String getValue() {
        return Value;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setValue(String Value) {
        this.Value = Value;
    }

    public long getExpenseId() {
        return ExpenseId;
    }

    public void setExpenseId(long ExpenseId) {
        this.ExpenseId = ExpenseId;
    }

    /** To-one relationship, resolved on first access. */
    public TableExpense getTableExpense() {
        long __key = this.ExpenseId;
        if (tableExpense__resolvedKey == null || !tableExpense__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableExpenseDao targetDao = daoSession.getTableExpenseDao();
            TableExpense tableExpenseNew = targetDao.load(__key);
            synchronized (this) {
                tableExpense = tableExpenseNew;
            	tableExpense__resolvedKey = __key;
            }
        }
        return tableExpense;
    }

    public void setTableExpense(TableExpense tableExpense) {
        if (tableExpense == null) {
            throw new DaoException("To-one property 'ExpenseId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.tableExpense = tableExpense;
            ExpenseId = tableExpense.getId();
            tableExpense__resolvedKey = ExpenseId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
