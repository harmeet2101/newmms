package com.mbopartners.mbomobile.data.db.generated.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mbopartners.mbomobile.data.db.generated.model.TableTimePeriod;

import com.mbopartners.mbomobile.data.db.generated.model.TableTimeEntry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE_TIME_ENTRY".
*/
public class TableTimeEntryDao extends AbstractDao<TableTimeEntry, Long> {

    public static final String TABLENAME = "TABLE_TIME_ENTRY";

    /**
     * Properties of entity TableTimeEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RecState = new Property(1, int.class, "RecState", false, "REC_STATE");
        public final static Property MboId = new Property(2, String.class, "MboId", false, "MBO_ID");
        public final static Property WorkOrderId = new Property(3, String.class, "WorkOrderId", false, "WORK_ORDER_ID");
        public final static Property TaskID = new Property(4, String.class, "TaskID", false, "TASK_ID");
        public final static Property Hours = new Property(5, double.class, "Hours", false, "HOURS");
        public final static Property Date = new Property(6, java.util.Date.class, "Date", false, "DATE");
        public final static Property Note = new Property(7, String.class, "Note", false, "NOTE");
        public final static Property Editable = new Property(8, boolean.class, "Editable", false, "EDITABLE");
        public final static Property Version = new Property(9, Double.class, "Version", false, "VERSION");
        public final static Property TimePeriodId = new Property(10, long.class, "TimePeriodId", false, "TIME_PERIOD_ID");
    };

    private DaoSession daoSession;

    private Query<TableTimeEntry> tableTimePeriod_TimeEntriesQuery;

    public TableTimeEntryDao(DaoConfig config) {
        super(config);
    }
    
    public TableTimeEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_TIME_ENTRY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REC_STATE\" INTEGER NOT NULL ," + // 1: RecState
                "\"MBO_ID\" TEXT," + // 2: MboId
                "\"WORK_ORDER_ID\" TEXT NOT NULL ," + // 3: WorkOrderId
                "\"TASK_ID\" TEXT NOT NULL ," + // 4: TaskID
                "\"HOURS\" REAL NOT NULL ," + // 5: Hours
                "\"DATE\" INTEGER NOT NULL ," + // 6: Date
                "\"NOTE\" TEXT," + // 7: Note
                "\"EDITABLE\" INTEGER NOT NULL ," + // 8: Editable
                "\"VERSION\" REAL," + // 9: Version
                "\"TIME_PERIOD_ID\" INTEGER NOT NULL );"); // 10: TimePeriodId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_TIME_ENTRY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TableTimeEntry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRecState());
 
        String MboId = entity.getMboId();
        if (MboId != null) {
            stmt.bindString(3, MboId);
        }
        stmt.bindString(4, entity.getWorkOrderId());
        stmt.bindString(5, entity.getTaskID());
        stmt.bindDouble(6, entity.getHours());
        stmt.bindLong(7, entity.getDate().getTime());
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(8, Note);
        }
        stmt.bindLong(9, entity.getEditable() ? 1L: 0L);
 
        Double Version = entity.getVersion();
        if (Version != null) {
            stmt.bindDouble(10, Version);
        }
        stmt.bindLong(11, entity.getTimePeriodId());
    }

    @Override
    protected void attachEntity(TableTimeEntry entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TableTimeEntry readEntity(Cursor cursor, int offset) {
        TableTimeEntry entity = new TableTimeEntry( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // RecState
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MboId
            cursor.getString(offset + 3), // WorkOrderId
            cursor.getString(offset + 4), // TaskID
            cursor.getDouble(offset + 5), // Hours
            new java.util.Date(cursor.getLong(offset + 6)), // Date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Note
            cursor.getShort(offset + 8) != 0, // Editable
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // Version
            cursor.getLong(offset + 10) // TimePeriodId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TableTimeEntry entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecState(cursor.getInt(offset + 1));
        entity.setMboId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWorkOrderId(cursor.getString(offset + 3));
        entity.setTaskID(cursor.getString(offset + 4));
        entity.setHours(cursor.getDouble(offset + 5));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setNote(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEditable(cursor.getShort(offset + 8) != 0);
        entity.setVersion(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setTimePeriodId(cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TableTimeEntry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TableTimeEntry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "TimeEntries" to-many relationship of TableTimePeriod. */
    public List<TableTimeEntry> _queryTableTimePeriod_TimeEntries(long TimePeriodId) {
        synchronized (this) {
            if (tableTimePeriod_TimeEntriesQuery == null) {
                QueryBuilder<TableTimeEntry> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TimePeriodId.eq(null));
                tableTimePeriod_TimeEntriesQuery = queryBuilder.build();
            }
        }
        Query<TableTimeEntry> query = tableTimePeriod_TimeEntriesQuery.forCurrentThread();
        query.setParameter(0, TimePeriodId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTableTimePeriodDao().getAllColumns());
            builder.append(" FROM TABLE_TIME_ENTRY T");
            builder.append(" LEFT JOIN TABLE_TIME_PERIOD T0 ON T.\"TIME_PERIOD_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TableTimeEntry loadCurrentDeep(Cursor cursor, boolean lock) {
        TableTimeEntry entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TableTimePeriod tableTimePeriod = loadCurrentOther(daoSession.getTableTimePeriodDao(), cursor, offset);
         if(tableTimePeriod != null) {
            entity.setTableTimePeriod(tableTimePeriod);
        }

        return entity;    
    }

    public TableTimeEntry loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TableTimeEntry> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TableTimeEntry> list = new ArrayList<TableTimeEntry>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TableTimeEntry> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TableTimeEntry> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
