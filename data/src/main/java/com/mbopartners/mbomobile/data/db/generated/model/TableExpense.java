package com.mbopartners.mbomobile.data.db.generated.model;

import android.util.Log;

import java.util.List;
import com.mbopartners.mbomobile.data.db.generated.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseDataDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableExpenseTypeDao;
import com.mbopartners.mbomobile.data.db.generated.dao.TableReceiptDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TABLE_EXPENSE".
 */
public class TableExpense {

    private Long id;
    /** Not-null value. */
    private String MboId;
    private String MboWorkOrderId;
    private String Description;
    /** Not-null value. */
    private String MboAssociateId;
    private double Amount;
    private boolean Editable;
    private boolean Billable;
    private Double Version;
    /** Not-null value. */
    private String MboExpenseTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableExpenseDao myDao;

    private TableExpenseType ExpenseType;
    private String ExpenseType__resolvedKey;

    private List<TableExpenseData> ExpenseData;
    private List<TableReceipt> Receipts;
    public String lastChangedDate;
    public TableExpense() {
    }

    public TableExpense(Long id) {
        this.id = id;
    }

    public TableExpense(Long id, String MboId, String MboWorkOrderId, String Description, String MboAssociateId, double Amount, boolean Editable, boolean Billable, Double Version, String MboExpenseTypeId,String lastChangedDate) {
        this.id = id;
        this.MboId = MboId;
        this.MboWorkOrderId = MboWorkOrderId;
        this.Description = Description;
        this.MboAssociateId = MboAssociateId;
        this.Amount = Amount;
        this.Editable = Editable;
        this.Billable = Billable;
        this.Version = Version;
        this.MboExpenseTypeId = MboExpenseTypeId;
        this.lastChangedDate=lastChangedDate;

        String str="id "+id+" mboID: "+MboId+" work orderId: "+MboWorkOrderId+
                "desc: "+Description+" mboAsso: "+MboAssociateId+" amount: "+Amount+
                " Editable: "+Editable+" Billable: "+Billable+" version: "+Version+" ExpenseTypeId "+MboExpenseTypeId+" last changeddate"+lastChangedDate;
        Log.d("data",str);
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableExpenseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getMboId() {
        return MboId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMboId(String MboId) {
        this.MboId = MboId;
    }

    public String getMboWorkOrderId() {
        return MboWorkOrderId;
    }

    public void setMboWorkOrderId(String MboWorkOrderId) {
        this.MboWorkOrderId = MboWorkOrderId;
    }

    public String getDescription() {
        return Description;
    }

    public void setDescription(String Description) {
        this.Description = Description;
    }

    /** Not-null value. */
    public String getMboAssociateId() {
        return MboAssociateId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMboAssociateId(String MboAssociateId) {
        this.MboAssociateId = MboAssociateId;
    }

    public double getAmount() {
        return Amount;
    }

    public void setAmount(double Amount) {
        this.Amount = Amount;
    }

    public boolean getEditable() {
        return Editable;
    }

    public void setEditable(boolean Editable) {
        this.Editable = Editable;
    }

    public boolean getBillable() {
        return Billable;
    }

    public void setBillable(boolean Billable) {
        this.Billable = Billable;
    }

    public Double getVersion() {
        return Version;
    }

    public void setVersion(Double Version) {
        this.Version = Version;
    }

    /** Not-null value. */
    public String getMboExpenseTypeId() {
        return MboExpenseTypeId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMboExpenseTypeId(String MboExpenseTypeId) {
        this.MboExpenseTypeId = MboExpenseTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public TableExpenseType getExpenseType() {
        String __key = this.MboExpenseTypeId;
        if (ExpenseType__resolvedKey == null || ExpenseType__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableExpenseTypeDao targetDao = daoSession.getTableExpenseTypeDao();
            TableExpenseType ExpenseTypeNew = targetDao.load(__key);
            synchronized (this) {
                ExpenseType = ExpenseTypeNew;
            	ExpenseType__resolvedKey = __key;
            }
        }
        return ExpenseType;
    }

    public void setExpenseType(TableExpenseType ExpenseType) {
        if (ExpenseType == null) {
            throw new DaoException("To-one property 'MboExpenseTypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ExpenseType = ExpenseType;
            MboExpenseTypeId = ExpenseType.getMboId();
            ExpenseType__resolvedKey = MboExpenseTypeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableExpenseData> getExpenseData() {
        if (ExpenseData == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableExpenseDataDao targetDao = daoSession.getTableExpenseDataDao();
            List<TableExpenseData> ExpenseDataNew = targetDao._queryTableExpense_ExpenseData(id);
            synchronized (this) {
                if(ExpenseData == null) {
                    ExpenseData = ExpenseDataNew;
                }
            }
        }
        return ExpenseData;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetExpenseData() {
        ExpenseData = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TableReceipt> getReceipts() {
        if (Receipts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableReceiptDao targetDao = daoSession.getTableReceiptDao();
            List<TableReceipt> ReceiptsNew = targetDao._queryTableExpense_Receipts(id);
            synchronized (this) {
                if(Receipts == null) {
                    Receipts = ReceiptsNew;
                }
            }
        }
        return Receipts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReceipts() {
        Receipts = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    public String getLastChangedDate() {
        return lastChangedDate;
    }

    public void setLastChangedDate(String lastChangedDate) {
        this.lastChangedDate = lastChangedDate;
    }
}
