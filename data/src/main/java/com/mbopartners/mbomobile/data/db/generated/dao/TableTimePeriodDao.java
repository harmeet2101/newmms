package com.mbopartners.mbomobile.data.db.generated.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mbopartners.mbomobile.data.db.generated.model.TableWorkOrder;

import com.mbopartners.mbomobile.data.db.generated.model.TableTimePeriod;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE_TIME_PERIOD".
*/
public class TableTimePeriodDao extends AbstractDao<TableTimePeriod, Long> {

    public static final String TABLENAME = "TABLE_TIME_PERIOD";

    /**
     * Properties of entity TableTimePeriod.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MboId = new Property(1, String.class, "MboId", false, "MBO_ID");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property StartDate = new Property(3, java.util.Date.class, "StartDate", false, "START_DATE");
        public final static Property EndDate = new Property(4, java.util.Date.class, "EndDate", false, "END_DATE");
        public final static Property Current = new Property(5, boolean.class, "Current", false, "CURRENT");
        public final static Property Submittable = new Property(6, boolean.class, "Submittable", false, "SUBMITTABLE");
        public final static Property MboWorkOrderId = new Property(7, String.class, "MboWorkOrderId", false, "MBO_WORK_ORDER_ID");
        public final static Property WorkOrderId = new Property(8, long.class, "WorkOrderId", false, "WORK_ORDER_ID");
    };

    private DaoSession daoSession;

    private Query<TableTimePeriod> tableWorkOrder_TimePeriodsQuery;

    public TableTimePeriodDao(DaoConfig config) {
        super(config);
    }
    
    public TableTimePeriodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_TIME_PERIOD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MBO_ID\" TEXT NOT NULL ," + // 1: MboId
                "\"NAME\" TEXT NOT NULL ," + // 2: Name
                "\"START_DATE\" INTEGER NOT NULL ," + // 3: StartDate
                "\"END_DATE\" INTEGER NOT NULL ," + // 4: EndDate
                "\"CURRENT\" INTEGER NOT NULL ," + // 5: Current
                "\"SUBMITTABLE\" INTEGER NOT NULL ," + // 6: Submittable
                "\"MBO_WORK_ORDER_ID\" TEXT NOT NULL ," + // 7: MboWorkOrderId
                "\"WORK_ORDER_ID\" INTEGER NOT NULL );"); // 8: WorkOrderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_TIME_PERIOD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TableTimePeriod entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMboId());
        stmt.bindString(3, entity.getName());
        stmt.bindLong(4, entity.getStartDate().getTime());
        stmt.bindLong(5, entity.getEndDate().getTime());
        stmt.bindLong(6, entity.getCurrent() ? 1L: 0L);
        stmt.bindLong(7, entity.getSubmittable() ? 1L: 0L);
        stmt.bindString(8, entity.getMboWorkOrderId());
        stmt.bindLong(9, entity.getWorkOrderId());
    }

    @Override
    protected void attachEntity(TableTimePeriod entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TableTimePeriod readEntity(Cursor cursor, int offset) {
        TableTimePeriod entity = new TableTimePeriod( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // MboId
            cursor.getString(offset + 2), // Name
            new java.util.Date(cursor.getLong(offset + 3)), // StartDate
            new java.util.Date(cursor.getLong(offset + 4)), // EndDate
            cursor.getShort(offset + 5) != 0, // Current
            cursor.getShort(offset + 6) != 0, // Submittable
            cursor.getString(offset + 7), // MboWorkOrderId
            cursor.getLong(offset + 8) // WorkOrderId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TableTimePeriod entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMboId(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setStartDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndDate(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCurrent(cursor.getShort(offset + 5) != 0);
        entity.setSubmittable(cursor.getShort(offset + 6) != 0);
        entity.setMboWorkOrderId(cursor.getString(offset + 7));
        entity.setWorkOrderId(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TableTimePeriod entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TableTimePeriod entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "TimePeriods" to-many relationship of TableWorkOrder. */
    public List<TableTimePeriod> _queryTableWorkOrder_TimePeriods(long WorkOrderId) {
        synchronized (this) {
            if (tableWorkOrder_TimePeriodsQuery == null) {
                QueryBuilder<TableTimePeriod> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WorkOrderId.eq(null));
                tableWorkOrder_TimePeriodsQuery = queryBuilder.build();
            }
        }
        Query<TableTimePeriod> query = tableWorkOrder_TimePeriodsQuery.forCurrentThread();
        query.setParameter(0, WorkOrderId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTableWorkOrderDao().getAllColumns());
            builder.append(" FROM TABLE_TIME_PERIOD T");
            builder.append(" LEFT JOIN TABLE_WORK_ORDER T0 ON T.\"WORK_ORDER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TableTimePeriod loadCurrentDeep(Cursor cursor, boolean lock) {
        TableTimePeriod entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TableWorkOrder tableWorkOrder = loadCurrentOther(daoSession.getTableWorkOrderDao(), cursor, offset);
         if(tableWorkOrder != null) {
            entity.setTableWorkOrder(tableWorkOrder);
        }

        return entity;    
    }

    public TableTimePeriod loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TableTimePeriod> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TableTimePeriod> list = new ArrayList<TableTimePeriod>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TableTimePeriod> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TableTimePeriod> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
